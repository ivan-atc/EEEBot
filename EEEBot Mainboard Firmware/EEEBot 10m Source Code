#include <ESP32Servo.h>
#include <ESP32Encoder.h>

Servo steeringServo;

#define enA 33 //enableA command line
#define enB 25 //enableB command line

#define INa 26  // channel A direction
#define INb 27  // channel A direction
#define INc 14  // channel B direction
#define INd 12  // channel B direction

//setting PWN proprieties
const int freq = 2000;
const int ledChannel1a =11;
const int ledChannelb =12;
const int resolution = 8;


//Set encoder parameters for reading

Encoder leftEncoder(1,3); //Enable left encoder pins for reading position

float distance;
long oldPosition = -999;
long newPosition;


void setup() {
   // configure the LED PWM functionalitites and attach the GPIO to be controlled - ensure that this is done before the servo channel is attached
  ledcAttachChannel(enA, freq, resolution, ledChannela);
  ledcAttachChannel(enB, freq, resolution, ledChannelb);

  // allow allocation of all timers
	ESP32PWM::allocateTimer(0);
	ESP32PWM::allocateTimer(1);
	ESP32PWM::allocateTimer(2);
	ESP32PWM::allocateTimer(3);
	steeringServo.setPeriodHertz(50);            // standard 50Hz servo
	steeringServo.attach(servoPin, 500, 2400);   // attaches the servo to the pin using the default min/max pulse widths of 1000us and 2000us

  pinMode(INa, OUTPUT);
  pinMode(INb, OUTPUT);
  pinMode(INc, OUTPUT);
  pinMode(INd, OUTPUT);

  // initialise serial communication
  Serial.begin(9600);
  Serial.println("ESP32 Running");  // sanity check


}

}

void loop() {
   // this code makes wheels forwards
  //set the speed of the motors - minimum speed of 0, maximum speed of 255 i.e. largest value for an 8-bit PW

  int leftSpeed = 255;
  int rightSpeed = 255;
    
  goForwards();
  leftReading();
  motors(leftSpeed, rightSpeed);
  delay(3000); //Delay in milliseconds
  stopMotors();

}

void motors(int leftSpeed, int rightSpeed) { 
//Set the motor speed individually
  leftSpeed = constrain(leftSpeed, 0, 255);  //LeftSpeed function to contrain the speed managable for a 8-bits ESP 32
  rightSpeed = constrain(rightSpeed, 0, 255); //RightSpeed function to contrain the speed managable for a 8-bits ESP 32 (speed<2^8)
  
  ledcWrite(enA, leftSpeed); //enA leftSpeed
  ledcWrite(enB, rightSpeed); //enB leftSpeed
  delay(25); 
}

 // Direction set by activating certain pins
void goForwards() { 
  digitalWrite(INa, HIGH);
  digitalWrite(INb, LOW); 
  digitalWrite(INc, HIGH);
  digitalWrite(INd, LOW);
}

void race_dist() (){
  newPosition = leftEncoder.read(); 
  
  // check if encoder has moved
  if (newPosition != oldPosition) 
  {
    oldPosition = newPosition;
    
  // edit the code below to calculate the distance moved, +1 increment = (diameter*pi)/encoder count per revolution
    distance = (0.06*M_PI)/44;
  // ***
    
    // output distance to the serial monitor                    
    Serial.print("Distance(m): ");
    Serial.println(distance);
}
